/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProfileImport } from './routes/profile'
import { Route as IndexImport } from './routes/index'
import { Route as UsersIndexImport } from './routes/users.index'
import { Route as ExploreIndexImport } from './routes/explore.index'
import { Route as UsersNetworkImport } from './routes/users.network'
import { Route as UsersUserIdImport } from './routes/users.$userId'
import { Route as ExploreYeetIdImport } from './routes/explore.$yeetId'

// Create/Update Routes

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersIndexRoute = UsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any)

const ExploreIndexRoute = ExploreIndexImport.update({
  id: '/explore/',
  path: '/explore/',
  getParentRoute: () => rootRoute,
} as any)

const UsersNetworkRoute = UsersNetworkImport.update({
  id: '/users/network',
  path: '/users/network',
  getParentRoute: () => rootRoute,
} as any)

const UsersUserIdRoute = UsersUserIdImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => rootRoute,
} as any)

const ExploreYeetIdRoute = ExploreYeetIdImport.update({
  id: '/explore/$yeetId',
  path: '/explore/$yeetId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/explore/$yeetId': {
      id: '/explore/$yeetId'
      path: '/explore/$yeetId'
      fullPath: '/explore/$yeetId'
      preLoaderRoute: typeof ExploreYeetIdImport
      parentRoute: typeof rootRoute
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdImport
      parentRoute: typeof rootRoute
    }
    '/users/network': {
      id: '/users/network'
      path: '/users/network'
      fullPath: '/users/network'
      preLoaderRoute: typeof UsersNetworkImport
      parentRoute: typeof rootRoute
    }
    '/explore/': {
      id: '/explore/'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof ExploreIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/profile': typeof ProfileRoute
  '/explore/$yeetId': typeof ExploreYeetIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/users/network': typeof UsersNetworkRoute
  '/explore': typeof ExploreIndexRoute
  '/users': typeof UsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/profile': typeof ProfileRoute
  '/explore/$yeetId': typeof ExploreYeetIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/users/network': typeof UsersNetworkRoute
  '/explore': typeof ExploreIndexRoute
  '/users': typeof UsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/profile': typeof ProfileRoute
  '/explore/$yeetId': typeof ExploreYeetIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/users/network': typeof UsersNetworkRoute
  '/explore/': typeof ExploreIndexRoute
  '/users/': typeof UsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/profile'
    | '/explore/$yeetId'
    | '/users/$userId'
    | '/users/network'
    | '/explore'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/profile'
    | '/explore/$yeetId'
    | '/users/$userId'
    | '/users/network'
    | '/explore'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/profile'
    | '/explore/$yeetId'
    | '/users/$userId'
    | '/users/network'
    | '/explore/'
    | '/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProfileRoute: typeof ProfileRoute
  ExploreYeetIdRoute: typeof ExploreYeetIdRoute
  UsersUserIdRoute: typeof UsersUserIdRoute
  UsersNetworkRoute: typeof UsersNetworkRoute
  ExploreIndexRoute: typeof ExploreIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProfileRoute: ProfileRoute,
  ExploreYeetIdRoute: ExploreYeetIdRoute,
  UsersUserIdRoute: UsersUserIdRoute,
  UsersNetworkRoute: UsersNetworkRoute,
  ExploreIndexRoute: ExploreIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/profile",
        "/explore/$yeetId",
        "/users/$userId",
        "/users/network",
        "/explore/",
        "/users/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/explore/$yeetId": {
      "filePath": "explore.$yeetId.tsx"
    },
    "/users/$userId": {
      "filePath": "users.$userId.tsx"
    },
    "/users/network": {
      "filePath": "users.network.tsx"
    },
    "/explore/": {
      "filePath": "explore.index.tsx"
    },
    "/users/": {
      "filePath": "users.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
